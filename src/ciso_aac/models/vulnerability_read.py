from collections.abc import Mapping
from typing import Any, TypeVar, Union, cast
from uuid import UUID

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.status_32b_enum import Status32BEnum
from ..types import UNSET, Unset

T = TypeVar("T", bound="VulnerabilityRead")


@_attrs_define
class VulnerabilityRead:
    """
    Attributes:
        id (UUID):
        folder (str):
        applied_controls (list[str]):
        filtering_labels (list[str]):
        security_exceptions (list[str]):
        name (str):
        description (Union[None, Unset, str]):
        ref_id (Union[Unset, str]):
        status (Union[Unset, Status32BEnum]): * `--` - Undefined
            * `potential` - Potential
            * `exploitable` - Exploitable
            * `mitigated` - Mitigated
            * `fixed` - Fixed
        severity (Union[Unset, int]): The severity of the vulnerability
    """

    id: UUID
    folder: str
    applied_controls: list[str]
    filtering_labels: list[str]
    security_exceptions: list[str]
    name: str
    description: Union[None, Unset, str] = UNSET
    ref_id: Union[Unset, str] = UNSET
    status: Union[Unset, Status32BEnum] = UNSET
    severity: Union[Unset, int] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        id = str(self.id)

        folder = self.folder

        applied_controls = self.applied_controls

        filtering_labels = self.filtering_labels

        security_exceptions = self.security_exceptions

        name = self.name

        description: Union[None, Unset, str]
        if isinstance(self.description, Unset):
            description = UNSET
        else:
            description = self.description

        ref_id = self.ref_id

        status: Union[Unset, str] = UNSET
        if not isinstance(self.status, Unset):
            status = self.status.value

        severity = self.severity

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "id": id,
                "folder": folder,
                "applied_controls": applied_controls,
                "filtering_labels": filtering_labels,
                "security_exceptions": security_exceptions,
                "name": name,
            }
        )
        if description is not UNSET:
            field_dict["description"] = description
        if ref_id is not UNSET:
            field_dict["ref_id"] = ref_id
        if status is not UNSET:
            field_dict["status"] = status
        if severity is not UNSET:
            field_dict["severity"] = severity

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        id = UUID(d.pop("id"))

        folder = d.pop("folder")

        applied_controls = cast(list[str], d.pop("applied_controls"))

        filtering_labels = cast(list[str], d.pop("filtering_labels"))

        security_exceptions = cast(list[str], d.pop("security_exceptions"))

        name = d.pop("name")

        def _parse_description(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        description = _parse_description(d.pop("description", UNSET))

        ref_id = d.pop("ref_id", UNSET)

        _status = d.pop("status", UNSET)
        status: Union[Unset, Status32BEnum]
        if isinstance(_status, Unset):
            status = UNSET
        else:
            status = Status32BEnum(_status)

        severity = d.pop("severity", UNSET)

        vulnerability_read = cls(
            id=id,
            folder=folder,
            applied_controls=applied_controls,
            filtering_labels=filtering_labels,
            security_exceptions=security_exceptions,
            name=name,
            description=description,
            ref_id=ref_id,
            status=status,
            severity=severity,
        )

        vulnerability_read.additional_properties = d
        return vulnerability_read

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
